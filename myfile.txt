可用：服务时间越久越好达到99.99的可用为标准 通常以冗余的方式实现高可用，即多台机器提供相同服务,互相监督。一旦主服务器出现问题，立即切换备用服务器无缝对接。在主服务器恢复后，再切换回去。
并发：服务器单位时间内可以处理的上限，通常分两个维度
1：垂直维度 提升单机性能(内存、cpu、ssd、网卡) 提升程序单机架构性能(使用单例类 内存池 线程池 避免频繁的上下文切换)
2：水平维度 使用分布式(服务器功能拆分 低耦合高内聚) 集群对外提供服务 、数据库分库表
性能：减少 数据拷贝、环境切换、内存分配、锁竞争
1：Io文件操作内存化
2：内存池 线程池
3：锁的选择 原子锁、读写锁、critical_section、Mutex、自旋锁 锁竞争是消耗系统资源，应该通过逻辑避免锁的使用
